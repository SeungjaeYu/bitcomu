<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- 독타입.. 중복이여서는 안된다 -->
<!--파일을 고유하게 이름짓는 것 namespace testMapper1의 이름을 줘야한다 패키지명 같이 줘야한다  -->
<!-- dao 클래스 위치 ctrl 키 눌러서 경로 확인되는지 .. check-->
<mapper namespace="kr.co.bitcomu.repository.dao.AdminDAO">

	<!-- 페이징 처리 시작 -->

	<sql id="pagingStart">
	  	    select *
	      from (select rownum rnum, a.*
			      from ( 
	</sql>
	<sql id="pagingEnd">
	  )
			    a)
		 where rnum between #{begin} and #{end}
	</sql>
	
	<!-- 페이징 처리 끝 -->
	
	<!-- 전체 게시판 조회를 위한 쿼리 -->

	<sql id="selectStudy">
		select s.user_no, (select user_id  from tb_user u
                    		where u.user_no = s.user_no ) user_id,
		 s.study_reg_dt as reg_dt, s.study_post_title as post_title,
                     (select code_name from tb_codenm where code_name='스터디게시판') code_name
                from tb_study s 
	</sql>
	
	<sql id="selectVote">
		select v.user_no, (select user_id  from tb_user u
                    		where u.user_no = v.user_no ) user_id, v.vote_reg_dt, v.vote_title,
                     (select code_name from tb_codenm where code_name='투표게시판') code_name
                from tb_vote v
	</sql>
	
	<sql id="selectNotice">
		select n.user_no, (select user_id  from tb_user u
                    	where u.user_no = n.user_no ) user_id,
		 				n.notice_reg_dt, n.notice_post_title,
                     (select code_name from tb_codenm where code_name='공지게시판') code_name
                from tb_notice n
	</sql>
	
	<sql id="selectTeam">
		select t.user_no, (select user_id  from tb_user u
                    	where u.user_no = t.user_no ) user_id,
		 				t.team_board_reg_dt, t.team_board_title,
                     (select code_name from tb_codenm where code_name='팀프로젝트게시판') code_name
                from tb_team t
	</sql>
	
	<sql id="selectYoutube">
		select y.user_no, (select user_id  from tb_user u
                    	where u.user_no = y.user_no ) user_id,
		 				y.yt_reg_dt, y.yt_title,
                     (select code_name from tb_codenm where code_name='온라인강의게시판') code_name
                from tb_youtube y
	</sql>
	
	<sql id="selectQna">
		select q.user_no, (select user_id  from tb_user u
                    	where u.user_no = q.user_no ) user_id,
		 				q.qna_reg_dt, q.qna_title,
                     (select code_name from tb_codenm where code_name='질문답변게시판') code_name
                from tb_qna q
	</sql>
	
	<sql id="selectTalk">
		select tk.user_no, (select user_id  from tb_user u
                    	where u.user_no = tk.user_no ) user_id,
		 				tk.talk_reg_dt, tk.talk_post_title,
                     (select code_name from tb_codenm where code_name='자유게시판') code_name
                from tb_talk tk
	</sql>
	
	<!-- 전체 게시판 조회를 위한 쿼리 끝 -->
	
	

	<resultMap type="Board" id="boardMap">
      <result column="user_no" property="userNo"/>
      <result column="user_id" property="userId"/>
      <result column="post_title" property="postTitle"/>
      <result column="reg_dt" property="regDt"/>
      <result column="code_name" property="codeName"/>
    </resultMap>


	<select id="selectAllBoards" parameterType="Page" resultMap="boardMap" flushCache="true" useCache="true">
	     <include refid="pagingStart" />
	     	select * from (
        		select * from (
	     			<include refid="selectStudy" />
	     		 order by study_post_no desc) study
	     		union all
	     		select * from (
	     			<include refid="selectVote" />
		 		 order by vote_no desc) vote
		 		union all
		 		select * from (
	     			<include refid="selectNotice" />
  			    order by notice_post_no desc) notice
  			    union all
  			    select * from (
	     			<include refid="selectTeam" />  			    
  			    order by team_board_no desc) team
  			    union all
  			    select * from ( 
  			        <include refid="selectYoutube" />
  			    order by yt_no desc) youtube
  			    union all
  			    select * from ( 
  			        <include refid="selectQna" />
  			    order by qna_no desc) qna  			        
  			    union all
  			    select * from ( 
  			        <include refid="selectTalk" />
  			    order by talk_post_no desc) talk  			        
	     		) allboard order by reg_dt desc
	     <include refid="pagingEnd" />
	</select>
	
	<select id="selectAllBoardsCount" resultType="int" flushCache="true" useCache="true">
	     	select count(*) from (
        		select * from (
	     			<include refid="selectStudy" />
	     		 			  ) study
	     		union all
	     		select * from (
	     			<include refid="selectVote" />
		 		 			  ) vote
		 		union all
		 		select * from (
	     			<include refid="selectNotice" />
  			    			 ) notice
		 		union all
		 		select * from (
	     			<include refid="selectTeam" />
  			    			 ) team
		 		union all
		 		select * from (
	     			<include refid="selectYoutube" />
  			    			 ) youtube
		 		union all
		 		select * from (
	     			<include refid="selectQna" />
  			    			 ) qna
		 		union all
		 		select * from (
	     			<include refid="selectTalk" />
  			    			 ) talk
	     		) allboard
	</select>
	
	
    
</mapper>	














